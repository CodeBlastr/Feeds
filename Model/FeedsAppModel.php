<?php

class FeedsAppModel extends AppModel {
	
	public $useTable = false;
	
	public $actAs = array();
	
	public $fieldmap = array(
		'title' => '',
		'description' => '',
		'advertiser-name' => '',
		'category' => '',
		'image_url' => '',
		'manufacturer_name' => '',
		'manufacturer_identifier' => '',
		'upc' => '',
		'isbn' => '',
		'retail_price' => '',
		'price' => '',
		'sale_price' => '',
		'currency' => '',
		'buy_url' => '',
		'product_id' => 'id'
	);
	
	//Total Results found 
	public $totalResults = 0;
	
	
	/**
 	* Constructor
 	*/
	public function __construct($id = false, $table = null, $ds = null) {
		
		//Adds Rateable Behavior.
		if (in_array('Ratings', CakePlugin::loaded())) {
			$this->actsAs[] = 'Ratings.Ratable';
		}
		
		//Adds Favorable Behavior
		if (in_array('Favorites', CakePlugin::loaded())) {
			$this->actsAs[] = 'Favorites.Favorite';
		}
		
		parent::__construct($id, $table, $ds);
		
		
	}
	
	protected function _renderproductdata($items = array()) {
		$products = array();
		if(!empty($items)) {
			foreach($items as $index => $item) {
				foreach($this->fieldmap as $key => $value) {
					$products[$index][$key] = $item[$value];
				}
			}
		}
		debug($products);
		break;
		return $products;
		
	}
	
	public function detectClothingType($result) {
        if ( !empty($result['name']) ) {
            $types = array(
                'dress' => array('dress'),
                'skirt' => array('skirt', 'skirts', 'mini skirt'),
                'tshirt' => array('t-shirt', 't shirt', 'tee', 'tees'),
                'pants' => array('jeans', 'pants', 'slacks', 'trousers'),
                'shorts' => array('shorts'),
                'shirt' => array('shirt', 'long sleeve', 'sweatshirt'),
                'shoes' => array('shoes', 'sneaker', 'sneakers', 'heels', 'boots', 'sandals', 'clogs'),
                'jacket' => array('coat', 'jacket', 'jackets', 'wind breaker')
            );
            

            $result['type'] = 'unknown';
            
            foreach ( $types as $type => $words ) {
                foreach($words as $word) {
                    if ( stripos($result['name'], $word) !== false || stripos($result['description'], $word) !== false ) {
                        $result['type'] = $type;
                        return $result;
                    }
                }   
            }
            
        }
        
        return $result;
    }

 /**
     * Explode generated Rating Id 
     * @param $id array generated by for ratings
     * @return product array
     */
    
    public function explodeRatingIds ($id) {
        $id = explode("__", $id);
        $product['manufacturer_name'] = isset($id[0]) ? $id[0] : 0;
        $product['manufacturer_idenifier'] = isset($id[1]) ? $id[1] : 0;
        $product['upc'] = isset($id[2]) ? $id[2] : 0;
        
        foreach($product as $k => $v) {
            if(empty($v)) {
                unset($product[$k]);
            }
        }

        return $product;
    }
	
	protected function _returnModelName($id = null) {
		
		if (empty($id) && empty($this->id)) {
			throw new Exception('Id not provided');
		}else {
			$id = !empty($id) ?  $id : $this->id;
		}
		
		$id = explode('__', $id);
		
		return 'Feed' . ucfirst(array_pop($id));
		
	}
	
	/**
	 * Custom After find, because record permissions aren't available of fake objects
	 */
	public function afterFind($results, $primary = false) {
		
		return $results;
		
	}
	

}

