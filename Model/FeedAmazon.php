<?php

class _FeedAmazon extends FeedsAppModel {
	
	public $useDbConfig = 'amazon';
	
	public $name = 'FeedAmazon';
	
	public $useTable = false;
	
	/**
	 * Array of fields that map to our fields
	 * $arr['ourfield'] => 'mapped_field'
	 */
	
	public $fieldmap = array(
		'name' => 'ItemAttributes.Title',
		'description' => 'EditorialReviews.EditorialReview.Content',
		'advertiser-name' => 'ItemAttributes.Publisher',
		'advertiser-id' => 'ASIN',
		'category' => 'ItemAttributes.ProductTypeName',
		'image_url' => 'LargeImage.URL',
		'manufacturer_name' => 'ItemAttributes.Brand',
		'manufacturer_idenifier' => 'ItemAttributes.Model',
		'upc' => 'ItemAttributes.UPC',
		'isbn' => 'ItemAttributes.ISBN',
		'retail_price' => '',
		'price' => 'ItemAttributes.ListPrice.Amount',
		'sale_price' => '',
		'currency' => 'ItemAttributes.ListPrice.CurrencyCode',
		'buy_url' => 'DetailPageURL',
		'product_id' => 'id'
	);
	
	/*
	 * Overriding the find method, so we can add our custom query params
	 */
	public function find($type = 'all', $query = array()) {
		
		if(!empty($this->id) && $type == 'first') {
			$query = array('conditions' => $this->_explodeIds($this->id));
		}
		
		if($type == 'first') {
			$query['conditions']['first'] = true;
		}
		
		//Set Search to Always All so it is mapped properly in datasource
		$typesearch = $this->_findType('all', $query);
		$results = parent::find($typesearch, $query);
		
		//Checks for errors
		if(!isset($results['FeedAmazon']['Item'])) {
		
			throw new BadRequestException('No items Found', 1);
			
		}
		
		//Returns empty array if nothing is found
		if(!isset($results['FeedAmazon']['Item'])) {
			$results['FeedAmazon']['Item'] = array();
		}else {
			$this->totalResults = $results['FeedAmazon']['TotalResults'];
		}

		//Creates Ids that we can search by
		if(isset($results['FeedAmazon']['Item'][0])) {
			foreach ($results['FeedAmazon']['Item'] as $key => $product) {
				$product = Set::flatten($product);
				$product['id'] = $this->_createIds($product);
				$results['FeedAmazon']['Item'][$key] = $product;
			}
		}else {
			$results['FeedAmazon']['Item'] = Set::flatten($results['FeedAmazon']['Item']);
			$results['FeedAmazon']['Item']['id'] = $this->_createIds($results['FeedAmazon']['Item']);
		}
		$this->feedData = $results;
		
		return $this->_renderproductdata($results['FeedAmazon']['Item']); 
	}

	//This Overirides the exists function to search by sku
	public function exists($id = null) {
		if ($id === null) {
			$id = $this->getID();
		}
		if ($id === false) {
			return false;
		}
		$conditions = $this->_explodeIds($id);
		
		$query = array(
			'conditions' => $conditions);
		$results = $this->find('first', $query);
		
		return (isset($results) && count($results) > 0);
	}
	
	/**
	 * Generates a Unique Id for Foreign Key saves
	 * @param $product an array from feed product
	 * @return $id
	 */
	
	private function _createIds ($product) {
		//set defaults
		
		return implode("__", array(
				str_replace('__', '', $product['ASIN']),
				str_replace('__', '', $product['ItemAttributes.Brand']),
				str_replace('__', '', $product['ItemAttributes.UPC']),
				str_replace('__', '', $product['ItemAttributes.ISBN']),
				'amazon'
		));
	}
	
	/**
	 * Exploded generated Id 
	 * @param $id array generated by _createIds
	 * @return product array
	 */
	
	public function _explodeIds ($id) {
		$id = explode("__", $id);
		$product['ASIN'] = isset($id[0]) ? $id[0] : 0;
		$product['ItemAttributes.Brand'] = isset($id[1]) ? $id[1] : 0;
		$product['ItemAttributes.UPC'] = isset($id[2]) ? $id[2] : 0;
		$product['ItemAttributes.ISBN'] = isset($id[3]) ? $id[3] : 0;
		$product['Model'] = isset($id[4]) ? $id[4] : 0;
		
		foreach($product as $k => $v) {
			if(empty($v)) {
				unset($product[$k]);
			}
		}

		return $product;
	}

}

if (!isset($refuseInit)) {
    class FeedAmazon extends _FeedAmazon {}
}
