<?php

class _FeedAmazon extends FeedsAppModel {
	
	public $useDbConfig = 'amazon';
	
	public $name = 'FeedAmazon';
	
	public $useTable = false;
	
	/**
	 * Array of fields that map to our fields
	 * $arr['ourfield'] => 'mapped_field'
	 */
	
	public $fieldmap = array(
		'name' => 'ItemAttributes.Title',
		'description' => 'EditorialReviews.EditorialReview.Content',
		'advertiser_name' => 'ItemAttributes.Publisher',
		'advertiser_id' => 'ASIN',
		'category' => 'ItemAttributes.ProductTypeName',
		'image_url' => 'LargeImage.URL',
		'manufacturer_name' => 'ItemAttributes.Brand',
		'manufacturer_idenifier' => 'ItemAttributes.Model',
		'upc' => 'ItemAttributes.UPC',
		'isbn' => 'ItemAttributes.ISBN',
		'retail_price' => '',
		'price' => 'ItemAttributes.ListPrice.Amount',
		'sale_price' => '',
		'currency' => 'ItemAttributes.ListPrice.CurrencyCode',
		'buy_url' => 'DetailPageURL',
		'product_id' => 'id'
	);
	
	/*
	 * Overriding the find method, so we can add our custom query params
	 */
	public function find($type = 'all', $query = array()) {
		
		if(!empty($this->id) && $type == 'first') {
			$query = array('conditions' => $this->_explodeIds($this->id));
		}
		
		//Set Search to Always All so it is mapped properly in datasource
		$typesearch = $this->_findType('all', $query);
       
        $query['conditions'] = $this->_cleanConditions($query['conditions']);
        
        if($type == 'first') {
            $query['conditions']['first'] = true;
        }
        
		$callback =  $query['callbacks'];
        $query['callbacks'] = false;
        $results = parent::find($typesearch, $query);
        $query['callbacks'] = isset($callback) ? $callback : true;
        
        //Checks for errors
        if(!isset($results['FeedAmazon']['Item'])) {
        
            throw new BadRequestException('No items Found', 1);
            
        }
        
        $pageCount = $results['FeedAmazon']['TotalPages'] > 10 ? 10 : $results['FeedAmazon']['TotalPages'];
        
        $resultitems = $results['FeedAmazon']['Item'];
        
        for($i = 2 ; $i <= $pageCount ; $i++) {
            $query['conditions']['ItemPage'] = $i;
            $results = parent::find($typesearch, $query);
            $resultitems = array_merge($resultitems, $results['FeedAmazon']['Item']);
        }
		
        $results['FeedAmazon']['Item'] = $resultitems;
		
		//Returns empty array if nothing is found
		if(!isset($results['FeedAmazon']['Item'])) {
			$results['FeedAmazon']['Item'] = array();
		}else {
			$this->totalResults = $results['FeedAmazon']['TotalResults'];
		}

		//Creates Ids that we can search by
		if(!isset($results['FeedAmazon']['Item'][0])) {
			$results['FeedAmazon']['Item'] = array($results['FeedAmazon']['Item']);
		}
        
        foreach ($results['FeedAmazon']['Item'] as $key => $product) {
                $product = Set::flatten($product);
                $product['id'] = $this->_createIds($product);
                $results['FeedAmazon']['Item'][$key] = $product;
                $results['FeedAmazon']['Item'][$key]['ItemAttributes.ListPrice.Amount'] = $results['FeedAmazon']['Item'][$key]['ItemAttributes.ListPrice.Amount'] * .01;
            }
        
		$this->feedData = $results;
        
        $results = $this->_renderproductdata($results['FeedAmazon']['Item']);
		
        if ($query['callbacks'] === true || $query['callbacks'] === 'after') {
            $results = $this->_filterResults($results);
        }
        
		return $results;
	}
	
	/**
	 * Generates a Unique Id for Foreign Key saves
	 * @param $product an array from feed product
	 * @return $id
	 */
	
	private function _createIds ($product) {
		//set defaults
		
		return implode("__", array(
				str_replace('__', '', $product['ASIN']),
				str_replace('__', '', $product['ItemAttributes.Brand']),
				str_replace('__', '', $product['ItemAttributes.UPC']),
				str_replace('__', '', $product['ItemAttributes.ISBN']),
				'amazon'
		));
	}
	
	/**
	 * Exploded generated Id 
	 * @param $id array generated by _createIds
	 * @return product array
	 */
	
	public function _explodeIds ($id) {
		$id = explode("__", $id);
		$product['ASIN'] = isset($id[0]) ? $id[0] : 0;
		$product['Manufacturer'] = isset($id[1]) ? $id[1] : 0;
		$product['ItemAttributes.UPC'] = isset($id[2]) ? $id[2] : 0;
		$product['ItemAttributes.ISBN'] = isset($id[3]) ? $id[3] : 0;
		
		foreach($product as $k => $v) {
			if(empty($v)) {
				unset($product[$k]);
			}
		}

		return $product;
	}
    
    //This Overirides the exists function to search by sku
    public function exists($id = null) {
        if ($id === null) {
            $id = $this->getID();
        }
        if ($id === false) {
            return false;
        }
        
        $this->id = $id;
        $result = $this->find('first');
        return (count($result) > 0);
    }
    
    /**
     * Function to clean search params to work with CJ Feed Source
     */
    
    protected function _cleanConditions($conditions) {
        $new_conditions = array('Keywords' => '');
        if(!empty($conditions)) {       
            foreach($conditions as $cond => $value) {
                //Check the array values and create new array
                if($cond == 'keywords') {
                    $new_conditions['Keywords'] = $value;
                }elseif($cond == 'manufacturer-name') {
                    $new_conditions['Manufacturer'] = $value;
                }elseif($cond == 'category') {
                    $new_conditions['Keywords'] .= ' '.$value; 
                }elseif($cond == 'ASIN') {
                    $new_conditions['ASIN'] = $value;
                }
                
            }
        }
        
        //HTML encode
        foreach($new_conditions as $k => $c) {
            $new_conditions[$k] = urlencode ($c);
        }
            
        return $new_conditions;
    }

}

if (!isset($refuseInit)) {
    class FeedAmazon extends _FeedAmazon {}
}
